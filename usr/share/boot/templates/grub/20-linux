# GRUB Linux Section

<?python

count = 0
default = None
defsetting = config.item("grub/default")
for x in linux.resolver.FindKernels():
	section, kernlist = x
	for kernel, kext in kernlist:
		print
		print "menuentry \"%s - %s\" {" % ( section, kernel )
		for mod in linux.grub.RequiredGRUBModules(linux.grub.BootDeviceDev()):
			print "	insmod %s" % mod
		print "	set root=%s" % linux.grub.BootDeviceGRUB()
		print "	search --no-floppy --fs-uuid --set "+linux.grub.BootDeviceUUID()

		kernpath=linux.resolver.RelativePathTo(kernel,"/boot")
		params=config.itemlist(section,"params")

		if "root=auto" in params:
			params.remove("root=auto")
			params.append("root=%s" % linux.grub.GetRootFSDev())

		if "rootfstype=auto" in params:
			params.remove("rootfstype=auto")
			for item in params:
				# find what root= is set to, then scan /etc/fstab for the corresponding fs type
				if item[0:5] == "root=":
					params.append("rootfstype=%s" % linux.grub.GetDevFSType(item[5:]))
					break

		print "	linux %s %s" % ( kernpath," ".join(params) )
		initrds=linux.resolver.FindInitrds(section, kernel, kext)
		for initrd in initrds:
			print "	initrd %s" % linux.resolver.RelativePathTo(initrd,"/boot")
		if len(config.item(section,"gfxmode")) != 0:
			print "	set gfxpayload=%s" % config.item(section,"gfxmode")[0]
		else:
			print "	set gfxpayload=keep"
		print "}"

		if defsettings:
			if os.path.basename(kernpath) == defsetting:
				default = count
		count += 1

if default != None:
	print
	print "set default=%s" % default

?>
